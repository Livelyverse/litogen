/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IERC20Lockable {
  export type LockInfoStruct = {
    amount: PromiseOrValue<BigNumberish>;
    lockedAt: PromiseOrValue<BigNumberish>;
    claimedAt: PromiseOrValue<BigNumberish>;
    source: PromiseOrValue<string>;
    stat: PromiseOrValue<BigNumberish>;
  };

  export type LockInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    amount: BigNumber;
    lockedAt: BigNumber;
    claimedAt: BigNumber;
    source: string;
    stat: number;
  };

  export type LockTokenRequestStruct = {
    source: PromiseOrValue<string>;
    dest: PromiseOrValue<string>;
    claimAt: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type LockTokenRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & { source: string; dest: string; claimAt: BigNumber; amount: BigNumber };

  export type UnLockTokenRequestStruct = {
    lockId: PromiseOrValue<BytesLike>;
    account: PromiseOrValue<string>;
    reason: PromiseOrValue<string>;
  };

  export type UnLockTokenRequestStructOutput = [string, string, string] & {
    lockId: string;
    account: string;
    reason: string;
  };
}

export interface IERC20LockableInterface extends utils.Interface {
  functions: {
    "claimToken(bytes32[])": FunctionFragment;
    "lockBalanceOf(address)": FunctionFragment;
    "lockInfo(bytes32,address)": FunctionFragment;
    "lockToken((address,address,uint256,uint256)[])": FunctionFragment;
    "unlockToken((bytes32,address,string)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "claimToken"
      | "claimToken(bytes32[])"
      | "lockBalanceOf"
      | "lockBalanceOf(address)"
      | "lockInfo"
      | "lockInfo(bytes32,address)"
      | "lockToken"
      | "lockToken((address,address,uint256,uint256)[])"
      | "unlockToken"
      | "unlockToken((bytes32,address,string)[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimToken",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToken(bytes32[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBalanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfo",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfo(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockToken",
    values: [IERC20Lockable.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lockToken((address,address,uint256,uint256)[])",
    values: [IERC20Lockable.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken",
    values: [IERC20Lockable.UnLockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken((bytes32,address,string)[])",
    values: [IERC20Lockable.UnLockTokenRequestStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimToken(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBalanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockInfo(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockToken((address,address,uint256,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken((bytes32,address,string)[])",
    data: BytesLike
  ): Result;

  events: {
    "TokenClaimed(bytes32,address,address,uint256)": EventFragment;
    "TokenLocked(bytes32,address,address,address,uint256,uint256)": EventFragment;
    "TokenUnlocked(bytes32,address,address,address,uint256,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenClaimed(bytes32,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenLocked(bytes32,address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnlocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenUnlocked(bytes32,address,address,address,uint256,string)"
  ): EventFragment;
}

export interface TokenClaimedEventObject {
  id: string;
  sender: string;
  src: string;
  amount: BigNumber;
}
export type TokenClaimedEvent = TypedEvent<
  [string, string, string, BigNumber],
  TokenClaimedEventObject
>;

export type TokenClaimedEventFilter = TypedEventFilter<TokenClaimedEvent>;

export interface TokenLockedEventObject {
  id: string;
  sender: string;
  src: string;
  account: string;
  claimAt: BigNumber;
  amount: BigNumber;
}
export type TokenLockedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  TokenLockedEventObject
>;

export type TokenLockedEventFilter = TypedEventFilter<TokenLockedEvent>;

export interface TokenUnlockedEventObject {
  id: string;
  sender: string;
  account: string;
  dest: string;
  amount: BigNumber;
  reason: string;
}
export type TokenUnlockedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  TokenUnlockedEventObject
>;

export type TokenUnlockedEventFilter = TypedEventFilter<TokenUnlockedEvent>;

export interface IERC20Lockable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IERC20LockableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimToken(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimToken(bytes32[])"(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockBalanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockInfo(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IERC20Lockable.LockInfoStructOutput]>;

    "lockInfo(bytes32,address)"(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IERC20Lockable.LockInfoStructOutput]>;

    lockToken(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lockToken((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockToken(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  claimToken(
    lockIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimToken(bytes32[])"(
    lockIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockBalanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockBalanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockInfo(
    lockId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IERC20Lockable.LockInfoStructOutput>;

  "lockInfo(bytes32,address)"(
    lockId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IERC20Lockable.LockInfoStructOutput>;

  lockToken(
    lockRequests: IERC20Lockable.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lockToken((address,address,uint256,uint256)[])"(
    lockRequests: IERC20Lockable.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockToken(
    unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unlockToken((bytes32,address,string)[])"(
    unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    claimToken(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimToken(bytes32[])"(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    lockBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockBalanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockInfo(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IERC20Lockable.LockInfoStructOutput>;

    "lockInfo(bytes32,address)"(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IERC20Lockable.LockInfoStructOutput>;

    lockToken(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "lockToken((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    unlockToken(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TokenClaimed(bytes32,address,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenClaimedEventFilter;
    TokenClaimed(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenClaimedEventFilter;

    "TokenLocked(bytes32,address,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      account?: null,
      claimAt?: null,
      amount?: null
    ): TokenLockedEventFilter;
    TokenLocked(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      account?: null,
      claimAt?: null,
      amount?: null
    ): TokenLockedEventFilter;

    "TokenUnlocked(bytes32,address,address,address,uint256,string)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      dest?: null,
      amount?: null,
      reason?: null
    ): TokenUnlockedEventFilter;
    TokenUnlocked(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      dest?: null,
      amount?: null,
      reason?: null
    ): TokenUnlockedEventFilter;
  };

  estimateGas: {
    claimToken(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimToken(bytes32[])"(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockBalanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockInfo(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockInfo(bytes32,address)"(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockToken(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lockToken((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockToken(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimToken(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimToken(bytes32[])"(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockBalanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockInfo(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockInfo(bytes32,address)"(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockToken(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lockToken((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockToken(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
