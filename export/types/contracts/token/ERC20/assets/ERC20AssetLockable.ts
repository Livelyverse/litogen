/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace IAsset {
  export type AssetInfoStruct = {
    profileId: PromiseOrValue<BytesLike>;
    balance: PromiseOrValue<BigNumberish>;
    name: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    accessControl: PromiseOrValue<string>;
    atype: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type AssetInfoStructOutput = [
    string,
    BigNumber,
    string,
    string,
    string,
    string,
    number,
    number
  ] & {
    profileId: string;
    balance: BigNumber;
    name: string;
    version: string;
    token: string;
    accessControl: string;
    atype: number;
    status: number;
  };
}

export declare namespace IERC20Lockable {
  export type LockTokenRequestStruct = {
    source: PromiseOrValue<string>;
    dest: PromiseOrValue<string>;
    claimAt: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type LockTokenRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & { source: string; dest: string; claimAt: BigNumber; amount: BigNumber };

  export type UnLockTokenRequestStruct = {
    lockId: PromiseOrValue<BytesLike>;
    account: PromiseOrValue<string>;
    reason: PromiseOrValue<string>;
  };

  export type UnLockTokenRequestStructOutput = [string, string, string] & {
    lockId: string;
    account: string;
    reason: string;
  };
}

export interface ERC20AssetLockableInterface extends utils.Interface {
  functions: {
    "assetAccessControl()": FunctionFragment;
    "assetBalance()": FunctionFragment;
    "assetInfo()": FunctionFragment;
    "assetName()": FunctionFragment;
    "assetProfileId()": FunctionFragment;
    "assetSafeMode()": FunctionFragment;
    "assetSetSafeMode(uint8)": FunctionFragment;
    "assetToken()": FunctionFragment;
    "assetType()": FunctionFragment;
    "assetVersion()": FunctionFragment;
    "balance()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenApprove(address,uint256)": FunctionFragment;
    "tokenLock((address,address,uint256,uint256)[])": FunctionFragment;
    "tokenTransfer(address,uint256)": FunctionFragment;
    "tokenTransferFrom(address,address,uint256)": FunctionFragment;
    "unlockToken((bytes32,address,string)[])": FunctionFragment;
    "withdrawBalance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assetAccessControl"
      | "assetAccessControl()"
      | "assetBalance"
      | "assetBalance()"
      | "assetInfo"
      | "assetInfo()"
      | "assetName"
      | "assetName()"
      | "assetProfileId"
      | "assetProfileId()"
      | "assetSafeMode"
      | "assetSafeMode()"
      | "assetSetSafeMode"
      | "assetSetSafeMode(uint8)"
      | "assetToken"
      | "assetToken()"
      | "assetType"
      | "assetType()"
      | "assetVersion"
      | "assetVersion()"
      | "balance"
      | "balance()"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "tokenApprove"
      | "tokenApprove(address,uint256)"
      | "tokenLock"
      | "tokenLock((address,address,uint256,uint256)[])"
      | "tokenTransfer"
      | "tokenTransfer(address,uint256)"
      | "tokenTransferFrom"
      | "tokenTransferFrom(address,address,uint256)"
      | "unlockToken"
      | "unlockToken((bytes32,address,string)[])"
      | "withdrawBalance"
      | "withdrawBalance(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assetAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetAccessControl()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetBalance()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetInfo()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetName()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetProfileId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetProfileId()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetSafeMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetSafeMode()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetSetSafeMode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetSetSafeMode(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetToken()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetType()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "balance()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenApprove",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenApprove(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLock",
    values: [IERC20Lockable.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLock((address,address,uint256,uint256)[])",
    values: [IERC20Lockable.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTransfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTransfer(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTransferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken",
    values: [IERC20Lockable.UnLockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken((bytes32,address,string)[])",
    values: [IERC20Lockable.UnLockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "assetAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetAccessControl()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetBalance()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetInfo()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetName()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetProfileId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetProfileId()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSafeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSafeMode()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSetSafeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSetSafeMode(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetType()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenApprove",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenApprove(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenLock((address,address,uint256,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTransfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken((bytes32,address,string)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance(address)",
    data: BytesLike
  ): Result;

  events: {
    "AssetSafeModeUpdated(address,address,uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetSafeModeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetSafeModeUpdated(address,address,uint8)"
  ): EventFragment;
}

export interface AssetSafeModeUpdatedEventObject {
  sender: string;
  assetId: string;
  status: number;
}
export type AssetSafeModeUpdatedEvent = TypedEvent<
  [string, string, number],
  AssetSafeModeUpdatedEventObject
>;

export type AssetSafeModeUpdatedEventFilter =
  TypedEventFilter<AssetSafeModeUpdatedEvent>;

export interface ERC20AssetLockable extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ERC20AssetLockableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    assetAccessControl(overrides?: CallOverrides): Promise<[string]>;

    "assetAccessControl()"(overrides?: CallOverrides): Promise<[string]>;

    assetBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "assetBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    assetInfo(
      overrides?: CallOverrides
    ): Promise<[IAsset.AssetInfoStructOutput]>;

    "assetInfo()"(
      overrides?: CallOverrides
    ): Promise<[IAsset.AssetInfoStructOutput]>;

    assetName(overrides?: CallOverrides): Promise<[string]>;

    "assetName()"(overrides?: CallOverrides): Promise<[string]>;

    assetProfileId(overrides?: CallOverrides): Promise<[string]>;

    "assetProfileId()"(overrides?: CallOverrides): Promise<[string]>;

    assetSafeMode(overrides?: CallOverrides): Promise<[number]>;

    "assetSafeMode()"(overrides?: CallOverrides): Promise<[number]>;

    assetSetSafeMode(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetSetSafeMode(uint8)"(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetToken(overrides?: CallOverrides): Promise<[string]>;

    "assetToken()"(overrides?: CallOverrides): Promise<[string]>;

    assetType(overrides?: CallOverrides): Promise<[number]>;

    "assetType()"(overrides?: CallOverrides): Promise<[number]>;

    assetVersion(overrides?: CallOverrides): Promise<[string]>;

    "assetVersion()"(overrides?: CallOverrides): Promise<[string]>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenApprove(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenApprove(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenLock(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenLock((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenTransfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenTransfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockToken(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  assetAccessControl(overrides?: CallOverrides): Promise<string>;

  "assetAccessControl()"(overrides?: CallOverrides): Promise<string>;

  assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "assetBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  assetInfo(overrides?: CallOverrides): Promise<IAsset.AssetInfoStructOutput>;

  "assetInfo()"(
    overrides?: CallOverrides
  ): Promise<IAsset.AssetInfoStructOutput>;

  assetName(overrides?: CallOverrides): Promise<string>;

  "assetName()"(overrides?: CallOverrides): Promise<string>;

  assetProfileId(overrides?: CallOverrides): Promise<string>;

  "assetProfileId()"(overrides?: CallOverrides): Promise<string>;

  assetSafeMode(overrides?: CallOverrides): Promise<number>;

  "assetSafeMode()"(overrides?: CallOverrides): Promise<number>;

  assetSetSafeMode(
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetSetSafeMode(uint8)"(
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetToken(overrides?: CallOverrides): Promise<string>;

  "assetToken()"(overrides?: CallOverrides): Promise<string>;

  assetType(overrides?: CallOverrides): Promise<number>;

  "assetType()"(overrides?: CallOverrides): Promise<number>;

  assetVersion(overrides?: CallOverrides): Promise<string>;

  "assetVersion()"(overrides?: CallOverrides): Promise<string>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenApprove(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenApprove(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenLock(
    lockRequests: IERC20Lockable.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenLock((address,address,uint256,uint256)[])"(
    lockRequests: IERC20Lockable.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenTransfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenTransfer(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenTransferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockToken(
    unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unlockToken((bytes32,address,string)[])"(
    unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBalance(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawBalance(address)"(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    assetAccessControl(overrides?: CallOverrides): Promise<string>;

    "assetAccessControl()"(overrides?: CallOverrides): Promise<string>;

    assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "assetBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetInfo(overrides?: CallOverrides): Promise<IAsset.AssetInfoStructOutput>;

    "assetInfo()"(
      overrides?: CallOverrides
    ): Promise<IAsset.AssetInfoStructOutput>;

    assetName(overrides?: CallOverrides): Promise<string>;

    "assetName()"(overrides?: CallOverrides): Promise<string>;

    assetProfileId(overrides?: CallOverrides): Promise<string>;

    "assetProfileId()"(overrides?: CallOverrides): Promise<string>;

    assetSafeMode(overrides?: CallOverrides): Promise<number>;

    "assetSafeMode()"(overrides?: CallOverrides): Promise<number>;

    assetSetSafeMode(
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "assetSetSafeMode(uint8)"(
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetToken(overrides?: CallOverrides): Promise<string>;

    "assetToken()"(overrides?: CallOverrides): Promise<string>;

    assetType(overrides?: CallOverrides): Promise<number>;

    "assetType()"(overrides?: CallOverrides): Promise<number>;

    assetVersion(overrides?: CallOverrides): Promise<string>;

    "assetVersion()"(overrides?: CallOverrides): Promise<string>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenApprove(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "tokenApprove(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenLock(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "tokenLock((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenTransfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "tokenTransfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "tokenTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unlockToken(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetSafeModeUpdated(address,address,uint8)"(
      sender?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<string> | null,
      status?: null
    ): AssetSafeModeUpdatedEventFilter;
    AssetSafeModeUpdated(
      sender?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<string> | null,
      status?: null
    ): AssetSafeModeUpdatedEventFilter;
  };

  estimateGas: {
    assetAccessControl(overrides?: CallOverrides): Promise<BigNumber>;

    "assetAccessControl()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "assetBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "assetInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetName(overrides?: CallOverrides): Promise<BigNumber>;

    "assetName()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetProfileId(overrides?: CallOverrides): Promise<BigNumber>;

    "assetProfileId()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetSafeMode(overrides?: CallOverrides): Promise<BigNumber>;

    "assetSafeMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetSetSafeMode(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetSetSafeMode(uint8)"(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetToken(overrides?: CallOverrides): Promise<BigNumber>;

    "assetToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetType(overrides?: CallOverrides): Promise<BigNumber>;

    "assetType()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "assetVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenApprove(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenApprove(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenLock(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenLock((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenTransfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenTransfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockToken(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    assetAccessControl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetAccessControl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetProfileId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetProfileId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetSafeMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetSafeMode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetSetSafeMode(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetSetSafeMode(uint8)"(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenApprove(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenApprove(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenLock(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenLock((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenTransfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenTransfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenTransferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockToken(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
