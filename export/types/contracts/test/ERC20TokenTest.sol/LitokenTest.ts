/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IERC20Extra {
  export type BatchTransferRequestStruct = {
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type BatchTransferRequestStructOutput = [string, BigNumber] & {
    to: string;
    amount: BigNumber;
  };

  export type BatchTransferFromRequestStruct = {
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type BatchTransferFromRequestStructOutput = [
    string,
    string,
    BigNumber
  ] & { from: string; to: string; amount: BigNumber };
}

export declare namespace IERC20Lockable {
  export type LockInfoStruct = {
    amount: PromiseOrValue<BigNumberish>;
    lockedAt: PromiseOrValue<BigNumberish>;
    claimedAt: PromiseOrValue<BigNumberish>;
    source: PromiseOrValue<string>;
    stat: PromiseOrValue<BigNumberish>;
  };

  export type LockInfoStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number
  ] & {
    amount: BigNumber;
    lockedAt: BigNumber;
    claimedAt: BigNumber;
    source: string;
    stat: number;
  };

  export type LockTokenRequestStruct = {
    source: PromiseOrValue<string>;
    dest: PromiseOrValue<string>;
    claimAt: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type LockTokenRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & { source: string; dest: string; claimAt: BigNumber; amount: BigNumber };

  export type UnLockTokenRequestStruct = {
    lockId: PromiseOrValue<BytesLike>;
    account: PromiseOrValue<string>;
    reason: PromiseOrValue<string>;
  };

  export type UnLockTokenRequestStructOutput = [string, string, string] & {
    lockId: string;
    account: string;
    reason: string;
  };
}

export declare namespace IERC20Taxable {
  export type TaxWhitelistUpdateRequestStruct = {
    account: PromiseOrValue<string>;
    isDeleted: PromiseOrValue<boolean>;
  };

  export type TaxWhitelistUpdateRequestStructOutput = [string, boolean] & {
    account: string;
    isDeleted: boolean;
  };
}

export interface LitokenTestInterface extends utils.Interface {
  functions: {
    "acl()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balance()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "batchTransfer((address,uint256)[])": FunctionFragment;
    "batchTransferFrom((address,address,uint256)[])": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "claimToken(bytes32[])": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "distributeToken(address[],address)": FunctionFragment;
    "domainSeperator()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "isDistributed()": FunctionFragment;
    "isPaused(address)": FunctionFragment;
    "isPausedAll()": FunctionFragment;
    "lockBalanceOf(address)": FunctionFragment;
    "lockInfo(bytes32,address)": FunctionFragment;
    "lockToken((address,address,uint256,uint256)[])": FunctionFragment;
    "mint(uint256)": FunctionFragment;
    "mintTo(address,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause(address)": FunctionFragment;
    "pauseAll()": FunctionFragment;
    "paused()": FunctionFragment;
    "pausedAccounts(uint256)": FunctionFragment;
    "permit(address,address,uint256,uint256,bytes)": FunctionFragment;
    "profile()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setProfile(string)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "taxRate()": FunctionFragment;
    "taxTreasury()": FunctionFragment;
    "taxUpdateRate(uint256)": FunctionFragment;
    "taxUpdateTreasury(address)": FunctionFragment;
    "taxUpdateWhitelist((address,bool)[])": FunctionFragment;
    "taxWhitelist(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlockToken((bytes32,address,string)[])": FunctionFragment;
    "unpause(address)": FunctionFragment;
    "unpauseAll()": FunctionFragment;
    "version()": FunctionFragment;
    "withdrawBalance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "acl"
      | "acl()"
      | "allowance"
      | "allowance(address,address)"
      | "approve"
      | "approve(address,uint256)"
      | "balance"
      | "balance()"
      | "balanceOf"
      | "balanceOf(address)"
      | "batchTransfer"
      | "batchTransfer((address,uint256)[])"
      | "batchTransferFrom"
      | "batchTransferFrom((address,address,uint256)[])"
      | "burn"
      | "burn(uint256)"
      | "burnFrom"
      | "burnFrom(address,uint256)"
      | "claimToken"
      | "claimToken(bytes32[])"
      | "decimals"
      | "decimals()"
      | "decreaseAllowance"
      | "decreaseAllowance(address,uint256)"
      | "distributeToken"
      | "distributeToken(address[],address)"
      | "domainSeperator"
      | "domainSeperator()"
      | "increaseAllowance"
      | "increaseAllowance(address,uint256)"
      | "isDistributed"
      | "isDistributed()"
      | "isPaused"
      | "isPaused(address)"
      | "isPausedAll"
      | "isPausedAll()"
      | "lockBalanceOf"
      | "lockBalanceOf(address)"
      | "lockInfo"
      | "lockInfo(bytes32,address)"
      | "lockToken"
      | "lockToken((address,address,uint256,uint256)[])"
      | "mint"
      | "mint(uint256)"
      | "mintTo"
      | "mintTo(address,uint256)"
      | "name"
      | "name()"
      | "nonces"
      | "nonces(address)"
      | "owner"
      | "owner()"
      | "pause"
      | "pause(address)"
      | "pauseAll"
      | "pauseAll()"
      | "paused"
      | "paused()"
      | "pausedAccounts"
      | "pausedAccounts(uint256)"
      | "permit"
      | "permit(address,address,uint256,uint256,bytes)"
      | "profile"
      | "profile()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "setProfile"
      | "setProfile(string)"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "symbol"
      | "symbol()"
      | "taxRate"
      | "taxRate()"
      | "taxTreasury"
      | "taxTreasury()"
      | "taxUpdateRate"
      | "taxUpdateRate(uint256)"
      | "taxUpdateTreasury"
      | "taxUpdateTreasury(address)"
      | "taxUpdateWhitelist"
      | "taxUpdateWhitelist((address,bool)[])"
      | "taxWhitelist"
      | "taxWhitelist(uint256)"
      | "totalSupply"
      | "totalSupply()"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "unlockToken"
      | "unlockToken((bytes32,address,string)[])"
      | "unpause"
      | "unpause(address)"
      | "unpauseAll"
      | "unpauseAll()"
      | "version"
      | "version()"
      | "withdrawBalance"
      | "withdrawBalance(address)"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "acl", values?: undefined): string;
  encodeFunctionData(functionFragment: "acl()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "balance()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer",
    values: [IERC20Extra.BatchTransferRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransfer((address,uint256)[])",
    values: [IERC20Extra.BatchTransferRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom",
    values: [IERC20Extra.BatchTransferFromRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchTransferFrom((address,address,uint256)[])",
    values: [IERC20Extra.BatchTransferFromRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burn(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFrom(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToken",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimToken(bytes32[])",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeToken",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeToken(address[],address)",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeperator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeperator()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDistributed()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPaused",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPaused(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPausedAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPausedAll()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockBalanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockBalanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfo",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockInfo(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockToken",
    values: [IERC20Lockable.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lockToken((address,address,uint256,uint256)[])",
    values: [IERC20Lockable.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mint(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTo(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "name()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nonces",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nonces(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pause",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pause(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "pauseAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseAll()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pausedAccounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pausedAccounts(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "permit(address,address,uint256,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "profile", values?: undefined): string;
  encodeFunctionData(functionFragment: "profile()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfile(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxRate", values?: undefined): string;
  encodeFunctionData(functionFragment: "taxRate()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "taxTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxTreasury()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "taxUpdateRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxUpdateRate(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxUpdateTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxUpdateTreasury(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxUpdateWhitelist",
    values: [IERC20Taxable.TaxWhitelistUpdateRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "taxUpdateWhitelist((address,bool)[])",
    values: [IERC20Taxable.TaxWhitelistUpdateRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "taxWhitelist",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxWhitelist(uint256)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken",
    values: [IERC20Lockable.UnLockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockToken((bytes32,address,string)[])",
    values: [IERC20Lockable.UnLockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpause(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseAll()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "version()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "acl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acl()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransfer((address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchTransferFrom((address,address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burn(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnFrom(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimToken(bytes32[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeToken(address[],address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeperator()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDistributed()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPaused(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPausedAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPausedAll()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockBalanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockInfo(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lockToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockToken((address,address,uint256,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mint(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintTo(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nonces(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pause(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pauseAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseAll()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausedAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausedAccounts(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permit(address,address,uint256,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "profile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "profile()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProfile(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "taxRate()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "taxTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxTreasury()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxUpdateRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxUpdateRate(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxUpdateTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxUpdateTreasury(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxUpdateWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxUpdateWhitelist((address,bool)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "taxWhitelist(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockToken((bytes32,address,string)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpause(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpauseAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseAll()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance(address)",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Burn(address,address,uint256,uint256)": EventFragment;
    "Mint(address,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address,address)": EventFragment;
    "PausedAll(address)": EventFragment;
    "ProfileUpdated(address,string,string)": EventFragment;
    "TaxRateUpdated(address,uint256)": EventFragment;
    "TaxTreasuryUpdated(address,address)": EventFragment;
    "TaxWhitelistUpdated(address,address,bool)": EventFragment;
    "TokenClaimed(bytes32,address,address,uint256)": EventFragment;
    "TokenLocked(bytes32,address,address,address,uint256,uint256)": EventFragment;
    "TokenUnlocked(bytes32,address,address,address,uint256,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address,address)": EventFragment;
    "UnpausedAll(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Approval(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Burn(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Mint(address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused(address,address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedAll(address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProfileUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ProfileUpdated(address,string,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxRateUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TaxRateUpdated(address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxTreasuryUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TaxTreasuryUpdated(address,address)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaxWhitelistUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TaxWhitelistUpdated(address,address,bool)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenClaimed(bytes32,address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenLocked(bytes32,address,address,address,uint256,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenUnlocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TokenUnlocked(bytes32,address,address,address,uint256,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "Transfer(address,address,uint256)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused(address,address)"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpausedAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnpausedAll(address)"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  spender: string;
  value: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface BurnEventObject {
  sender: string;
  account: string;
  amount: BigNumber;
  totalSupply: BigNumber;
}
export type BurnEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BurnEventObject
>;

export type BurnEventFilter = TypedEventFilter<BurnEvent>;

export interface MintEventObject {
  sender: string;
  account: string;
  amount: BigNumber;
  totalSupply: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  sender: string;
  account: string;
}
export type PausedEvent = TypedEvent<[string, string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PausedAllEventObject {
  sender: string;
}
export type PausedAllEvent = TypedEvent<[string], PausedAllEventObject>;

export type PausedAllEventFilter = TypedEventFilter<PausedAllEvent>;

export interface ProfileUpdatedEventObject {
  sender: string;
  oldProfile: string;
  newProfile: string;
}
export type ProfileUpdatedEvent = TypedEvent<
  [string, string, string],
  ProfileUpdatedEventObject
>;

export type ProfileUpdatedEventFilter = TypedEventFilter<ProfileUpdatedEvent>;

export interface TaxRateUpdatedEventObject {
  sender: string;
  rate: BigNumber;
}
export type TaxRateUpdatedEvent = TypedEvent<
  [string, BigNumber],
  TaxRateUpdatedEventObject
>;

export type TaxRateUpdatedEventFilter = TypedEventFilter<TaxRateUpdatedEvent>;

export interface TaxTreasuryUpdatedEventObject {
  sender: string;
  account: string;
}
export type TaxTreasuryUpdatedEvent = TypedEvent<
  [string, string],
  TaxTreasuryUpdatedEventObject
>;

export type TaxTreasuryUpdatedEventFilter =
  TypedEventFilter<TaxTreasuryUpdatedEvent>;

export interface TaxWhitelistUpdatedEventObject {
  sender: string;
  account: string;
  isDeleted: boolean;
}
export type TaxWhitelistUpdatedEvent = TypedEvent<
  [string, string, boolean],
  TaxWhitelistUpdatedEventObject
>;

export type TaxWhitelistUpdatedEventFilter =
  TypedEventFilter<TaxWhitelistUpdatedEvent>;

export interface TokenClaimedEventObject {
  id: string;
  sender: string;
  src: string;
  amount: BigNumber;
}
export type TokenClaimedEvent = TypedEvent<
  [string, string, string, BigNumber],
  TokenClaimedEventObject
>;

export type TokenClaimedEventFilter = TypedEventFilter<TokenClaimedEvent>;

export interface TokenLockedEventObject {
  id: string;
  sender: string;
  src: string;
  account: string;
  claimAt: BigNumber;
  amount: BigNumber;
}
export type TokenLockedEvent = TypedEvent<
  [string, string, string, string, BigNumber, BigNumber],
  TokenLockedEventObject
>;

export type TokenLockedEventFilter = TypedEventFilter<TokenLockedEvent>;

export interface TokenUnlockedEventObject {
  id: string;
  sender: string;
  account: string;
  dest: string;
  amount: BigNumber;
  reason: string;
}
export type TokenUnlockedEvent = TypedEvent<
  [string, string, string, string, BigNumber, string],
  TokenUnlockedEventObject
>;

export type TokenUnlockedEventFilter = TypedEventFilter<TokenUnlockedEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  value: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface UnpausedEventObject {
  sender: string;
  account: string;
}
export type UnpausedEvent = TypedEvent<[string, string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface UnpausedAllEventObject {
  sender: string;
}
export type UnpausedAllEvent = TypedEvent<[string], UnpausedAllEventObject>;

export type UnpausedAllEventFilter = TypedEventFilter<UnpausedAllEvent>;

export interface LitokenTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LitokenTestInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acl(overrides?: CallOverrides): Promise<[string]>;

    "acl()"(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    batchTransfer(
      requests: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "batchTransfer((address,uint256)[])"(
      requests: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchTransferFrom(
      requests: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "batchTransferFrom((address,address,uint256)[])"(
      requests: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "burn(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "burnFrom(address,uint256)"(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimToken(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "claimToken(bytes32[])"(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeToken(
      assets: PromiseOrValue<string>[],
      taxTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "distributeToken(address[],address)"(
      assets: PromiseOrValue<string>[],
      taxTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    domainSeperator(overrides?: CallOverrides): Promise<[string]>;

    "domainSeperator()"(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isDistributed(overrides?: CallOverrides): Promise<[boolean]>;

    "isDistributed()"(overrides?: CallOverrides): Promise<[boolean]>;

    isPaused(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPaused(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPausedAll(overrides?: CallOverrides): Promise<[boolean]>;

    "isPausedAll()"(overrides?: CallOverrides): Promise<[boolean]>;

    lockBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "lockBalanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    lockInfo(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IERC20Lockable.LockInfoStructOutput]>;

    "lockInfo(bytes32,address)"(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IERC20Lockable.LockInfoStructOutput]>;

    lockToken(
      lockRequest: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "lockToken((address,address,uint256,uint256)[])"(
      lockRequest: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mint(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mint(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mintTo(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mintTo(address,uint256)"(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pause(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "pauseAll()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    pausedAccounts(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "pausedAccounts(uint256)"(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,bytes)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    profile(overrides?: CallOverrides): Promise<[string]>;

    "profile()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProfile(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setProfile(string)"(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    taxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "taxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    taxTreasury(overrides?: CallOverrides): Promise<[string]>;

    "taxTreasury()"(overrides?: CallOverrides): Promise<[string]>;

    taxUpdateRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "taxUpdateRate(uint256)"(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taxUpdateTreasury(
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "taxUpdateTreasury(address)"(
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taxUpdateWhitelist(
      request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "taxUpdateWhitelist((address,bool)[])"(
      request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taxWhitelist(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "taxWhitelist(uint256)"(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockToken(
      unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unpause(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpauseAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "unpauseAll()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    "version()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  acl(overrides?: CallOverrides): Promise<string>;

  "acl()"(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  batchTransfer(
    requests: IERC20Extra.BatchTransferRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "batchTransfer((address,uint256)[])"(
    requests: IERC20Extra.BatchTransferRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchTransferFrom(
    requests: IERC20Extra.BatchTransferFromRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "batchTransferFrom((address,address,uint256)[])"(
    requests: IERC20Extra.BatchTransferFromRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burn(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "burn(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "burnFrom(address,uint256)"(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimToken(
    lockIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "claimToken(bytes32[])"(
    lockIds: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeToken(
    assets: PromiseOrValue<string>[],
    taxTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "distributeToken(address[],address)"(
    assets: PromiseOrValue<string>[],
    taxTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  domainSeperator(overrides?: CallOverrides): Promise<string>;

  "domainSeperator()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isDistributed(overrides?: CallOverrides): Promise<boolean>;

  "isDistributed()"(overrides?: CallOverrides): Promise<boolean>;

  isPaused(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isPaused(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPausedAll(overrides?: CallOverrides): Promise<boolean>;

  "isPausedAll()"(overrides?: CallOverrides): Promise<boolean>;

  lockBalanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "lockBalanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lockInfo(
    lockId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IERC20Lockable.LockInfoStructOutput>;

  "lockInfo(bytes32,address)"(
    lockId: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IERC20Lockable.LockInfoStructOutput>;

  lockToken(
    lockRequest: IERC20Lockable.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "lockToken((address,address,uint256,uint256)[])"(
    lockRequest: IERC20Lockable.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mint(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mint(uint256)"(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mintTo(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mintTo(address,uint256)"(
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "nonces(address)"(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pause(address)"(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pauseAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "pauseAll()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  pausedAccounts(
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "pausedAccounts(uint256)"(
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  permit(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,bytes)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    deadline: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  profile(overrides?: CallOverrides): Promise<string>;

  "profile()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProfile(
    profileName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setProfile(string)"(
    profileName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  taxRate(overrides?: CallOverrides): Promise<BigNumber>;

  "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  taxTreasury(overrides?: CallOverrides): Promise<string>;

  "taxTreasury()"(overrides?: CallOverrides): Promise<string>;

  taxUpdateRate(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "taxUpdateRate(uint256)"(
    rate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taxUpdateTreasury(
    treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "taxUpdateTreasury(address)"(
    treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taxUpdateWhitelist(
    request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "taxUpdateWhitelist((address,bool)[])"(
    request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taxWhitelist(
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "taxWhitelist(uint256)"(
    offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockToken(
    unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unlockToken((bytes32,address,string)[])"(
    unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unpause(address)"(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpauseAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "unpauseAll()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  "version()"(overrides?: CallOverrides): Promise<string>;

  withdrawBalance(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawBalance(address)"(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    acl(overrides?: CallOverrides): Promise<string>;

    "acl()"(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTransfer(
      requests: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransfer((address,uint256)[])"(
      requests: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchTransferFrom(
      requests: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "batchTransferFrom((address,address,uint256)[])"(
      requests: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "burn(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "burnFrom(address,uint256)"(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimToken(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claimToken(bytes32[])"(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeToken(
      assets: PromiseOrValue<string>[],
      taxTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "distributeToken(address[],address)"(
      assets: PromiseOrValue<string>[],
      taxTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeperator(overrides?: CallOverrides): Promise<string>;

    "domainSeperator()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isDistributed(overrides?: CallOverrides): Promise<boolean>;

    "isDistributed()"(overrides?: CallOverrides): Promise<boolean>;

    isPaused(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isPaused(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPausedAll(overrides?: CallOverrides): Promise<boolean>;

    "isPausedAll()"(overrides?: CallOverrides): Promise<boolean>;

    lockBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockBalanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockInfo(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IERC20Lockable.LockInfoStructOutput>;

    "lockInfo(bytes32,address)"(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IERC20Lockable.LockInfoStructOutput>;

    lockToken(
      lockRequest: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "lockToken((address,address,uint256,uint256)[])"(
      lockRequest: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    mint(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mint(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    mintTo(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mintTo(address,uint256)"(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "pause(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseAll(overrides?: CallOverrides): Promise<void>;

    "pauseAll()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    pausedAccounts(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "pausedAccounts(uint256)"(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,bytes)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    profile(overrides?: CallOverrides): Promise<string>;

    "profile()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setProfile(
      profileName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setProfile(string)"(
      profileName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxTreasury(overrides?: CallOverrides): Promise<string>;

    "taxTreasury()"(overrides?: CallOverrides): Promise<string>;

    taxUpdateRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "taxUpdateRate(uint256)"(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taxUpdateTreasury(
      treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "taxUpdateTreasury(address)"(
      treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    taxUpdateWhitelist(
      request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    "taxUpdateWhitelist((address,bool)[])"(
      request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    taxWhitelist(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "taxWhitelist(uint256)"(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockToken(
      unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "unpause(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseAll(overrides?: CallOverrides): Promise<void>;

    "unpauseAll()"(overrides?: CallOverrides): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    "version()"(overrides?: CallOverrides): Promise<string>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      spender?: PromiseOrValue<string> | null,
      value?: null
    ): ApprovalEventFilter;

    "Burn(address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
      totalSupply?: null
    ): BurnEventFilter;
    Burn(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
      totalSupply?: null
    ): BurnEventFilter;

    "Mint(address,address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
      totalSupply?: null
    ): MintEventFilter;
    Mint(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      amount?: null,
      totalSupply?: null
    ): MintEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address,address)"(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): PausedEventFilter;
    Paused(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): PausedEventFilter;

    "PausedAll(address)"(
      sender?: PromiseOrValue<string> | null
    ): PausedAllEventFilter;
    PausedAll(sender?: PromiseOrValue<string> | null): PausedAllEventFilter;

    "ProfileUpdated(address,string,string)"(
      sender?: PromiseOrValue<string> | null,
      oldProfile?: PromiseOrValue<string> | null,
      newProfile?: PromiseOrValue<string> | null
    ): ProfileUpdatedEventFilter;
    ProfileUpdated(
      sender?: PromiseOrValue<string> | null,
      oldProfile?: PromiseOrValue<string> | null,
      newProfile?: PromiseOrValue<string> | null
    ): ProfileUpdatedEventFilter;

    "TaxRateUpdated(address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      rate?: null
    ): TaxRateUpdatedEventFilter;
    TaxRateUpdated(
      sender?: PromiseOrValue<string> | null,
      rate?: null
    ): TaxRateUpdatedEventFilter;

    "TaxTreasuryUpdated(address,address)"(
      sender?: PromiseOrValue<string> | null,
      account?: null
    ): TaxTreasuryUpdatedEventFilter;
    TaxTreasuryUpdated(
      sender?: PromiseOrValue<string> | null,
      account?: null
    ): TaxTreasuryUpdatedEventFilter;

    "TaxWhitelistUpdated(address,address,bool)"(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      isDeleted?: null
    ): TaxWhitelistUpdatedEventFilter;
    TaxWhitelistUpdated(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      isDeleted?: null
    ): TaxWhitelistUpdatedEventFilter;

    "TokenClaimed(bytes32,address,address,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenClaimedEventFilter;
    TokenClaimed(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenClaimedEventFilter;

    "TokenLocked(bytes32,address,address,address,uint256,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      account?: null,
      claimAt?: null,
      amount?: null
    ): TokenLockedEventFilter;
    TokenLocked(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      src?: PromiseOrValue<string> | null,
      account?: null,
      claimAt?: null,
      amount?: null
    ): TokenLockedEventFilter;

    "TokenUnlocked(bytes32,address,address,address,uint256,string)"(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      dest?: null,
      amount?: null,
      reason?: null
    ): TokenUnlockedEventFilter;
    TokenUnlocked(
      id?: PromiseOrValue<BytesLike> | null,
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null,
      dest?: null,
      amount?: null,
      reason?: null
    ): TokenUnlockedEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      value?: null
    ): TransferEventFilter;

    "Unpaused(address,address)"(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): UnpausedEventFilter;
    Unpaused(
      sender?: PromiseOrValue<string> | null,
      account?: PromiseOrValue<string> | null
    ): UnpausedEventFilter;

    "UnpausedAll(address)"(
      sender?: PromiseOrValue<string> | null
    ): UnpausedAllEventFilter;
    UnpausedAll(sender?: PromiseOrValue<string> | null): UnpausedAllEventFilter;
  };

  estimateGas: {
    acl(overrides?: CallOverrides): Promise<BigNumber>;

    "acl()"(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    batchTransfer(
      requests: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "batchTransfer((address,uint256)[])"(
      requests: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchTransferFrom(
      requests: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "batchTransferFrom((address,address,uint256)[])"(
      requests: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "burn(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "burnFrom(address,uint256)"(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimToken(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "claimToken(bytes32[])"(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeToken(
      assets: PromiseOrValue<string>[],
      taxTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "distributeToken(address[],address)"(
      assets: PromiseOrValue<string>[],
      taxTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    domainSeperator(overrides?: CallOverrides): Promise<BigNumber>;

    "domainSeperator()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isDistributed(overrides?: CallOverrides): Promise<BigNumber>;

    "isDistributed()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPaused(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPaused(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPausedAll(overrides?: CallOverrides): Promise<BigNumber>;

    "isPausedAll()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockBalanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockInfo(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "lockInfo(bytes32,address)"(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockToken(
      lockRequest: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "lockToken((address,address,uint256,uint256)[])"(
      lockRequest: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mint(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mint(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mintTo(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mintTo(address,uint256)"(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pause(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pauseAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "pauseAll()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    pausedAccounts(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "pausedAccounts(uint256)"(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,bytes)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    profile(overrides?: CallOverrides): Promise<BigNumber>;

    "profile()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProfile(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setProfile(string)"(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "taxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxTreasury(overrides?: CallOverrides): Promise<BigNumber>;

    "taxTreasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    taxUpdateRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "taxUpdateRate(uint256)"(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taxUpdateTreasury(
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "taxUpdateTreasury(address)"(
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taxUpdateWhitelist(
      request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "taxUpdateWhitelist((address,bool)[])"(
      request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taxWhitelist(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "taxWhitelist(uint256)"(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockToken(
      unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unpause(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpauseAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "unpauseAll()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    "version()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "acl()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    batchTransfer(
      requests: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "batchTransfer((address,uint256)[])"(
      requests: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchTransferFrom(
      requests: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "batchTransferFrom((address,address,uint256)[])"(
      requests: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burn(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "burn(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "burnFrom(address,uint256)"(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimToken(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "claimToken(bytes32[])"(
      lockIds: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeToken(
      assets: PromiseOrValue<string>[],
      taxTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "distributeToken(address[],address)"(
      assets: PromiseOrValue<string>[],
      taxTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    domainSeperator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "domainSeperator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isDistributed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isDistributed()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isPaused(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPaused(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPausedAll(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "isPausedAll()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockBalanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockBalanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockInfo(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockInfo(bytes32,address)"(
      lockId: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockToken(
      lockRequest: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "lockToken((address,address,uint256,uint256)[])"(
      lockRequest: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mint(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mint(uint256)"(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mintTo(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mintTo(address,uint256)"(
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pause(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pauseAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "pauseAll()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pausedAccounts(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pausedAccounts(uint256)"(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,bytes)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      deadline: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    profile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "profile()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProfile(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setProfile(string)"(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "taxRate()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxTreasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "taxTreasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    taxUpdateRate(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "taxUpdateRate(uint256)"(
      rate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taxUpdateTreasury(
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "taxUpdateTreasury(address)"(
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taxUpdateWhitelist(
      request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "taxUpdateWhitelist((address,bool)[])"(
      request: IERC20Taxable.TaxWhitelistUpdateRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taxWhitelist(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "taxWhitelist(uint256)"(
      offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockToken(
      unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unlockToken((bytes32,address,string)[])"(
      unlockRequest: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unpause(address)"(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpauseAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "unpauseAll()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "version()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
