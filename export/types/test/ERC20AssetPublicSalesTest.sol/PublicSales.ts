/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IAsset {
  export type AssetInfoStruct = {
    profile: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    version: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    accessControl: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    atype: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type AssetInfoStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    number,
    number
  ] & {
    profile: string;
    name: string;
    version: string;
    token: string;
    accessControl: string;
    owner: string;
    atype: number;
    status: number;
  };
}

export declare namespace IERC20Extra {
  export type BatchTransferRequestStruct = {
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type BatchTransferRequestStructOutput = [string, BigNumber] & {
    to: string;
    amount: BigNumber;
  };

  export type BatchTransferFromRequestStruct = {
    from: PromiseOrValue<string>;
    to: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type BatchTransferFromRequestStructOutput = [
    string,
    string,
    BigNumber
  ] & { from: string; to: string; amount: BigNumber };
}

export declare namespace IERC20Lockable {
  export type LockTokenRequestStruct = {
    source: PromiseOrValue<string>;
    dest: PromiseOrValue<string>;
    claimAt: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type LockTokenRequestStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & { source: string; dest: string; claimAt: BigNumber; amount: BigNumber };

  export type UnLockTokenRequestStruct = {
    lockId: PromiseOrValue<BytesLike>;
    account: PromiseOrValue<string>;
    reason: PromiseOrValue<string>;
  };

  export type UnLockTokenRequestStructOutput = [string, string, string] & {
    lockId: string;
    account: string;
    reason: string;
  };
}

export interface PublicSalesInterface extends utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "assetAccessControl()": FunctionFragment;
    "assetInfo()": FunctionFragment;
    "assetName()": FunctionFragment;
    "assetProfile()": FunctionFragment;
    "assetSafeMode()": FunctionFragment;
    "assetSetProfile(string)": FunctionFragment;
    "assetSetSafeMode(uint8)": FunctionFragment;
    "assetToken()": FunctionFragment;
    "assetType()": FunctionFragment;
    "assetVersion()": FunctionFragment;
    "balance()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenBatchTransfer((address,uint256)[])": FunctionFragment;
    "tokenBatchTransferFrom((address,address,uint256)[])": FunctionFragment;
    "tokenDecreaseAllowance(address,uint256)": FunctionFragment;
    "tokenIncreaseAllowance(address,uint256)": FunctionFragment;
    "tokenLock((address,address,uint256,uint256)[])": FunctionFragment;
    "tokenUnlock((bytes32,address,string)[])": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawBalance(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allowance"
      | "allowance(address,address)"
      | "approve"
      | "approve(address,uint256)"
      | "assetAccessControl"
      | "assetAccessControl()"
      | "assetInfo"
      | "assetInfo()"
      | "assetName"
      | "assetName()"
      | "assetProfile"
      | "assetProfile()"
      | "assetSafeMode"
      | "assetSafeMode()"
      | "assetSetProfile"
      | "assetSetProfile(string)"
      | "assetSetSafeMode"
      | "assetSetSafeMode(uint8)"
      | "assetToken"
      | "assetToken()"
      | "assetType"
      | "assetType()"
      | "assetVersion"
      | "assetVersion()"
      | "balance"
      | "balance()"
      | "balanceOf"
      | "balanceOf(address)"
      | "decimals"
      | "decimals()"
      | "owner"
      | "owner()"
      | "renounceOwnership"
      | "renounceOwnership()"
      | "supportsInterface"
      | "supportsInterface(bytes4)"
      | "symbol"
      | "symbol()"
      | "tokenBatchTransfer"
      | "tokenBatchTransfer((address,uint256)[])"
      | "tokenBatchTransferFrom"
      | "tokenBatchTransferFrom((address,address,uint256)[])"
      | "tokenDecreaseAllowance"
      | "tokenDecreaseAllowance(address,uint256)"
      | "tokenIncreaseAllowance"
      | "tokenIncreaseAllowance(address,uint256)"
      | "tokenLock"
      | "tokenLock((address,address,uint256,uint256)[])"
      | "tokenUnlock"
      | "tokenUnlock((bytes32,address,string)[])"
      | "totalSupply"
      | "totalSupply()"
      | "transfer"
      | "transfer(address,uint256)"
      | "transferFrom"
      | "transferFrom(address,address,uint256)"
      | "transferOwnership"
      | "transferOwnership(address)"
      | "withdrawBalance"
      | "withdrawBalance(address)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allowance",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance(address,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetAccessControl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetAccessControl()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetInfo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetInfo()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetName()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetProfile",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetProfile()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetSafeMode",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetSafeMode()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetSetProfile",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetSetProfile(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetSetSafeMode",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetSetSafeMode(uint8)",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assetToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetToken()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "assetType", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "assetType()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "assetVersion()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balance", values?: undefined): string;
  encodeFunctionData(functionFragment: "balance()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimals()",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface(bytes4)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenBatchTransfer",
    values: [IERC20Extra.BatchTransferRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBatchTransfer((address,uint256)[])",
    values: [IERC20Extra.BatchTransferRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBatchTransferFrom",
    values: [IERC20Extra.BatchTransferFromRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBatchTransferFrom((address,address,uint256)[])",
    values: [IERC20Extra.BatchTransferFromRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecreaseAllowance(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIncreaseAllowance",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenIncreaseAllowance(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLock",
    values: [IERC20Lockable.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenLock((address,address,uint256,uint256)[])",
    values: [IERC20Lockable.LockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenUnlock",
    values: [IERC20Lockable.UnLockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenUnlock((bytes32,address,string)[])",
    values: [IERC20Lockable.UnLockTokenRequestStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer(address,uint256)",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBalance(address)",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowance(address,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approve(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetAccessControl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetAccessControl()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetInfo()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetName()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetProfile()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSafeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSafeMode()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSetProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSetProfile(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSetSafeMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetSetSafeMode(uint8)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetToken()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assetType", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assetType()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assetVersion()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balance()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOf(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decimals()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface(bytes4)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBatchTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBatchTransfer((address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenBatchTransferFrom((address,address,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIncreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenIncreaseAllowance(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenLock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenLock((address,address,uint256,uint256)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenUnlock((bytes32,address,string)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transfer(address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBalance(address)",
    data: BytesLike
  ): Result;

  events: {
    "AssetProfileUpdated(address,string,string)": EventFragment;
    "AssetSafeModeUpdated(address,address,uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetProfileUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetProfileUpdated(address,string,string)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetSafeModeUpdated"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AssetSafeModeUpdated(address,address,uint8)"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred(address,address)"
  ): EventFragment;
}

export interface AssetProfileUpdatedEventObject {
  sender: string;
  oldProfile: string;
  newProfile: string;
}
export type AssetProfileUpdatedEvent = TypedEvent<
  [string, string, string],
  AssetProfileUpdatedEventObject
>;

export type AssetProfileUpdatedEventFilter =
  TypedEventFilter<AssetProfileUpdatedEvent>;

export interface AssetSafeModeUpdatedEventObject {
  sender: string;
  assetId: string;
  status: number;
}
export type AssetSafeModeUpdatedEvent = TypedEvent<
  [string, string, number],
  AssetSafeModeUpdatedEventObject
>;

export type AssetSafeModeUpdatedEventFilter =
  TypedEventFilter<AssetSafeModeUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PublicSales extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PublicSalesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetAccessControl(overrides?: CallOverrides): Promise<[string]>;

    "assetAccessControl()"(overrides?: CallOverrides): Promise<[string]>;

    assetInfo(
      overrides?: CallOverrides
    ): Promise<[IAsset.AssetInfoStructOutput]>;

    "assetInfo()"(
      overrides?: CallOverrides
    ): Promise<[IAsset.AssetInfoStructOutput]>;

    assetName(overrides?: CallOverrides): Promise<[string]>;

    "assetName()"(overrides?: CallOverrides): Promise<[string]>;

    assetProfile(overrides?: CallOverrides): Promise<[string]>;

    "assetProfile()"(overrides?: CallOverrides): Promise<[string]>;

    assetSafeMode(overrides?: CallOverrides): Promise<[number]>;

    "assetSafeMode()"(overrides?: CallOverrides): Promise<[number]>;

    assetSetProfile(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetSetProfile(string)"(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetSetSafeMode(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assetSetSafeMode(uint8)"(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    assetToken(overrides?: CallOverrides): Promise<[string]>;

    "assetToken()"(overrides?: CallOverrides): Promise<[string]>;

    assetType(overrides?: CallOverrides): Promise<[number]>;

    "assetType()"(overrides?: CallOverrides): Promise<[number]>;

    assetVersion(overrides?: CallOverrides): Promise<[string]>;

    "assetVersion()"(overrides?: CallOverrides): Promise<[string]>;

    balance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "balance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    tokenBatchTransfer(
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenBatchTransfer((address,uint256)[])"(
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenBatchTransferFrom(
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenBatchTransferFrom((address,address,uint256)[])"(
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenDecreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenDecreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenIncreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenIncreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenLock(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenLock((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    tokenUnlock(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "tokenUnlock((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: PromiseOrValue<string>,
    spender: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetAccessControl(overrides?: CallOverrides): Promise<string>;

  "assetAccessControl()"(overrides?: CallOverrides): Promise<string>;

  assetInfo(overrides?: CallOverrides): Promise<IAsset.AssetInfoStructOutput>;

  "assetInfo()"(
    overrides?: CallOverrides
  ): Promise<IAsset.AssetInfoStructOutput>;

  assetName(overrides?: CallOverrides): Promise<string>;

  "assetName()"(overrides?: CallOverrides): Promise<string>;

  assetProfile(overrides?: CallOverrides): Promise<string>;

  "assetProfile()"(overrides?: CallOverrides): Promise<string>;

  assetSafeMode(overrides?: CallOverrides): Promise<number>;

  "assetSafeMode()"(overrides?: CallOverrides): Promise<number>;

  assetSetProfile(
    profileName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetSetProfile(string)"(
    profileName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetSetSafeMode(
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assetSetSafeMode(uint8)"(
    status: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  assetToken(overrides?: CallOverrides): Promise<string>;

  "assetToken()"(overrides?: CallOverrides): Promise<string>;

  assetType(overrides?: CallOverrides): Promise<number>;

  "assetType()"(overrides?: CallOverrides): Promise<number>;

  assetVersion(overrides?: CallOverrides): Promise<string>;

  "assetVersion()"(overrides?: CallOverrides): Promise<string>;

  balance(overrides?: CallOverrides): Promise<BigNumber>;

  "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "balanceOf(address)"(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  tokenBatchTransfer(
    request: IERC20Extra.BatchTransferRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenBatchTransfer((address,uint256)[])"(
    request: IERC20Extra.BatchTransferRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenBatchTransferFrom(
    request: IERC20Extra.BatchTransferFromRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenBatchTransferFrom((address,address,uint256)[])"(
    request: IERC20Extra.BatchTransferFromRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenDecreaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenDecreaseAllowance(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenIncreaseAllowance(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenIncreaseAllowance(address,uint256)"(
    spender: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenLock(
    lockRequests: IERC20Lockable.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenLock((address,address,uint256,uint256)[])"(
    lockRequests: IERC20Lockable.LockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  tokenUnlock(
    unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "tokenUnlock((bytes32,address,string)[])"(
    unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawBalance(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "withdrawBalance(address)"(
    recepient: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetAccessControl(overrides?: CallOverrides): Promise<string>;

    "assetAccessControl()"(overrides?: CallOverrides): Promise<string>;

    assetInfo(overrides?: CallOverrides): Promise<IAsset.AssetInfoStructOutput>;

    "assetInfo()"(
      overrides?: CallOverrides
    ): Promise<IAsset.AssetInfoStructOutput>;

    assetName(overrides?: CallOverrides): Promise<string>;

    "assetName()"(overrides?: CallOverrides): Promise<string>;

    assetProfile(overrides?: CallOverrides): Promise<string>;

    "assetProfile()"(overrides?: CallOverrides): Promise<string>;

    assetSafeMode(overrides?: CallOverrides): Promise<number>;

    "assetSafeMode()"(overrides?: CallOverrides): Promise<number>;

    assetSetProfile(
      profileName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assetSetProfile(string)"(
      profileName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    assetSetSafeMode(
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "assetSetSafeMode(uint8)"(
      status: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    assetToken(overrides?: CallOverrides): Promise<string>;

    "assetToken()"(overrides?: CallOverrides): Promise<string>;

    assetType(overrides?: CallOverrides): Promise<number>;

    "assetType()"(overrides?: CallOverrides): Promise<number>;

    assetVersion(overrides?: CallOverrides): Promise<string>;

    "assetVersion()"(overrides?: CallOverrides): Promise<string>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    tokenBatchTransfer(
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "tokenBatchTransfer((address,uint256)[])"(
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenBatchTransferFrom(
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "tokenBatchTransferFrom((address,address,uint256)[])"(
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenDecreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokenDecreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenIncreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "tokenIncreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenLock(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "tokenLock((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    tokenUnlock(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    "tokenUnlock((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AssetProfileUpdated(address,string,string)"(
      sender?: PromiseOrValue<string> | null,
      oldProfile?: PromiseOrValue<string> | null,
      newProfile?: PromiseOrValue<string> | null
    ): AssetProfileUpdatedEventFilter;
    AssetProfileUpdated(
      sender?: PromiseOrValue<string> | null,
      oldProfile?: PromiseOrValue<string> | null,
      newProfile?: PromiseOrValue<string> | null
    ): AssetProfileUpdatedEventFilter;

    "AssetSafeModeUpdated(address,address,uint8)"(
      sender?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<string> | null,
      status?: null
    ): AssetSafeModeUpdatedEventFilter;
    AssetSafeModeUpdated(
      sender?: PromiseOrValue<string> | null,
      assetId?: PromiseOrValue<string> | null,
      status?: null
    ): AssetSafeModeUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetAccessControl(overrides?: CallOverrides): Promise<BigNumber>;

    "assetAccessControl()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetInfo(overrides?: CallOverrides): Promise<BigNumber>;

    "assetInfo()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetName(overrides?: CallOverrides): Promise<BigNumber>;

    "assetName()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetProfile(overrides?: CallOverrides): Promise<BigNumber>;

    "assetProfile()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetSafeMode(overrides?: CallOverrides): Promise<BigNumber>;

    "assetSafeMode()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetSetProfile(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetSetProfile(string)"(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetSetSafeMode(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assetSetSafeMode(uint8)"(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    assetToken(overrides?: CallOverrides): Promise<BigNumber>;

    "assetToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetType(overrides?: CallOverrides): Promise<BigNumber>;

    "assetType()"(overrides?: CallOverrides): Promise<BigNumber>;

    assetVersion(overrides?: CallOverrides): Promise<BigNumber>;

    "assetVersion()"(overrides?: CallOverrides): Promise<BigNumber>;

    balance(overrides?: CallOverrides): Promise<BigNumber>;

    "balance()"(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    tokenBatchTransfer(
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenBatchTransfer((address,uint256)[])"(
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenBatchTransferFrom(
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenBatchTransferFrom((address,address,uint256)[])"(
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenDecreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenDecreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenIncreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenIncreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenLock(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenLock((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    tokenUnlock(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "tokenUnlock((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: PromiseOrValue<string>,
      spender: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetAccessControl(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assetAccessControl()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    assetInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetInfo()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetName()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetProfile(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetProfile()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetSafeMode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetSafeMode()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetSetProfile(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetSetProfile(string)"(
      profileName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetSetSafeMode(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assetSetSafeMode(uint8)"(
      status: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    assetToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetType(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetType()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    assetVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "assetVersion()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "balance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenBatchTransfer(
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenBatchTransfer((address,uint256)[])"(
      request: IERC20Extra.BatchTransferRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenBatchTransferFrom(
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenBatchTransferFrom((address,address,uint256)[])"(
      request: IERC20Extra.BatchTransferFromRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenDecreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenDecreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenIncreaseAllowance(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenIncreaseAllowance(address,uint256)"(
      spender: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenLock(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenLock((address,address,uint256,uint256)[])"(
      lockRequests: IERC20Lockable.LockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    tokenUnlock(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "tokenUnlock((bytes32,address,string)[])"(
      unlockRequests: IERC20Lockable.UnLockTokenRequestStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawBalance(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawBalance(address)"(
      recepient: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
